-- Whitelist System for Roblox Scripts

-- GAME WHITELIST: List of GameIds allowed to run this script
local authorizedGames = {14614012690} -- Replace with your GameId(s)

-- PLAYER WHITELIST: List of UserIds allowed to use this script
local authorizedUsers = {12345678, 87654321} -- Replace with your UserId(s)

-- Enable server verification (optional, requires an external server)
local useServerValidation = false
local serverValidationUrl = "https://your-auth-server.com/validate" -- Replace with your server URL

-- Services
local httpService = game:GetService("HttpService")

-- Functions
local function isGameAuthorized()
    return table.find(authorizedGames, game.GameId) ~= nil
end

local function isPlayerAuthorized(player)
    return table.find(authorizedUsers, player.UserId) ~= nil
end

local function validateWithServer(player)
    if not useServerValidation then return true end
    local success, response = pcall(function()
        return httpService:GetAsync(serverValidationUrl .. "?gameId=" .. game.GameId .. "&userId=" .. player.UserId)
    end)
    return success and response == "Authorized"
end

-- Main Logic
if not isGameAuthorized() then
    error("This game is not authorized to run this script!")
end

game.Players.PlayerAdded:Connect(function(player)
    if not isPlayerAuthorized(player) or not validateWithServer(player) then
        player:Kick("You are not authorized to use this script!")
    end
end)


Game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)
local template = script:WaitForChild("PlayerFrame")
local scroller = script.Parent:WaitForChild("PlayerScroller")
local uis = game:GetService("UserInputService")

uis.InputBegan:Connect(function(key, gameProcessed)
	if key.KeyCode == Enum.KeyCode.Tab and not gameProcessed then
		if scroller.Position == UDim2.new(0.93, 0,0.214, 0) then
			scroller:TweenPosition(UDim2.new(1.1, 0,0.214, 0), "Out", "Quad", 0.1)
		else
			scroller:TweenPosition(UDim2.new(0.93, 0,0.214, 0), "Out", "Quad", 0.1)
		end
	end
end)

function updatePlayers()
	for i, child in pairs(scroller:GetChildren()) do
		if child:IsA("Frame") then child:Destroy() end
	end
	for i, plr in pairs(game.Players:GetPlayers()) do
		local img = game.Players:GetUserThumbnailAsync(plr.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
		local templateClone = template:Clone()
		templateClone.DisplayName.Text = plr.DisplayName
		templateClone.RealName.Text = "@" .. plr.Name
		local part = Instance.new("Part")
		part.Shape = Enum.PartType.Cylinder
		part.Orientation = Vector3.new(0, -90, 0)
		part.Size = Vector3.new(1, 1, 1)
		part.Transparency = 1
		local decal = Instance.new("Decal", part)
		decal.Face = Enum.NormalId.Right
		decal.Texture = img
		local camera = Instance.new("Camera")
		camera.CFrame = part.CFrame * CFrame.Angles(0, math.rad(90), 0) + Vector3.new(0, 0, 1.25)
		templateClone.CharacterImage.CurrentCamera = camera
		camera.Parent = templateClone.CharacterImage
		part.Parent = templateClone.CharacterImage
		templateClone.Parent = scroller
		scroller.CanvasSize = UDim2.new(0, 0, 0, scroller.UIListLayout.AbsoluteContentSize.Y)
	end
end

updatePlayers()
game.Players.PlayerAdded:Connect(updatePlayers)
game.Players.PlayerRemoving:Connect(updatePlayers)
