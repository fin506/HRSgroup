-- Anti-Exploit Script
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Functions to log potential exploits
local function logExploit(player, reason)
	print("HRSgroup Exploit detected for player: " .. player.Name .. ". Reason: " .. reason)
	-- Optionally ban/kick the player (be cautious with this)
	player:Kick("HRSgroup Anti Exploit system: " .. reason)
end

-- 1. RemoteEvent/RemoteFunction Security
local function protectRemoteEvents()
	for _, remote in ipairs(ReplicatedStorage:GetDescendants()) do
		if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
			remote.OnServerEvent:Connect(function(player, ...)
				local args = {...}
				-- Add validation for expected arguments
				if not args[1] or type(args[1]) ~= "string" then
					logExploit(player, "Invalid RemoteEvent usage")
				end
			end)
		end
	end
end

-- 2. Detect Unauthorized Changes in Workspace
local function monitorWorkspace()
	Workspace.DescendantAdded:Connect(function(descendant)
		if descendant:IsA("Script") or descendant:IsA("LocalScript") then
			descendant:Destroy()
			print("HRSgroup Unauthorized script detected and removed!")
		end
	end)
end

-- 3. Validate Player Properties
local function validatePlayerActions(player)
	player.Changed:Connect(function(property)
		if property == "CharacterAppearanceId" then
			logExploit(player, "Unauthorized CharacterAppearanceId change")
		end
	end)
end

-- Connect functions to events
Players.PlayerAdded:Connect(function(player)
	validatePlayerActions(player)
end)

-- Initial protections
protectRemoteEvents()
monitorWorkspace()

print("HRSgroup AntiExploit launched")
